% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standardise-datetime.R
\name{standardise_datetime}
\alias{standardise_datetime}
\title{Standardise Datetime}
\usage{
standardise_datetime(x, standardised_offset = -8)
}
\arguments{
\item{x}{a datetime object}

\item{standardised_offset}{an integer scalar indicating the time difference
in hours between UTC and the desired time zone.}
}
\value{
A standardised date-time object.
}
\description{
Corrects for any time zone and day light savings difference in a date-time object
and returns as tz = 'UTC' but shifted by the standardised_offset. Depending
on the logging device recorded date times are often in different time zones,
i.e., Vemco acoustic receiver detections (UTC), Onset
temperature logger readings (PST or PDT depending on when deployed)
versus watch (PST or PDT depending on when recorded). To allow analyses to
be performed on the year, month, day, hour etc elements without any errors
it is important to standardise the date time objects so they have the
same time zone. The current function achieves this by forcing all the
date-times to tz UTC and then adjusting for the difference in hours between
the original \code{utc_offset} and the standardised offset.
}
\examples{

vemco <- as.POSIXct(c("2000-04-01 17:00:00"), tz = "UTC")
watch <- as.POSIXct(c("2000-04-01 9:00:00", "2000-04-02 10:00:00"), tz = "PST8PDT")
logger <- as.POSIXct(c("2000-04-01 9:00:00", "2000-04-02 9:00:00"), tz = "Etc/GMT+8")

standardise_datetime(vemco)
standardise_datetime(watch)
standardise_datetime(logger)
}
\seealso{
\code{\link{utc_offset}} \code{\link{timezones}}
}

